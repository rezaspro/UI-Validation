#pragma checksum "E:\03. TEST PROJECT\CorePractice\CorePractice\Views\Test\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8e1040e1eb3475ff81760cb7e1ba5869ddaf563b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Test_Index), @"mvc.1.0.view", @"/Views/Test/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Test/Index.cshtml", typeof(AspNetCore.Views_Test_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "E:\03. TEST PROJECT\CorePractice\CorePractice\Views\_ViewImports.cshtml"
using CorePractice;

#line default
#line hidden
#line 2 "E:\03. TEST PROJECT\CorePractice\CorePractice\Views\_ViewImports.cshtml"
using CorePractice.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8e1040e1eb3475ff81760cb7e1ba5869ddaf563b", @"/Views/Test/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0209a11b53432d8fd91f1d6aa292a4972ccf917d", @"/Views/_ViewImports.cshtml")]
    public class Views_Test_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<CorePractice.Models.Testing>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "-404", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "E:\03. TEST PROJECT\CorePractice\CorePractice\Views\Test\Index.cshtml"
  




    var xsha = "";



#line default
#line hidden
            BeginContext(73, 51, true);
            WriteLiteral("    <script>\r\n\r\n        xsha = \"\";\r\n    </script>\r\n");
            EndContext();
#line 14 "E:\03. TEST PROJECT\CorePractice\CorePractice\Views\Test\Index.cshtml"

    foreach (var item in @ViewBag.Data)
    {
        xsha = "<option value=" + @item.Id + " data-amount=" + @item.Amount + ">" + @item.Dura + "</option>";
    }


#line default
#line hidden
            BeginContext(297, 1436, true);
            WriteLiteral(@"
<div class=""col-md-12"">
    <div class=""col-md-8"">
        <div class=""row"">
            <table class=""table table-bordered"" id=""initialTable"">
                <thead>
                    <tr hidden>
                        <th style=""text-align:center; width:49%"">Name</th>
                        <th style=""text-align:center; width:16%"">Quantity</th>
                        <th style=""text-align:center; width:16%"">Amount</th>
                        <th style=""text-align:center; width:14%"">Duration</th>
                        <th style=""text-align:center; width:5%""></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th style=""text-align:center; width:49%""><input type=""text"" class=""form-control"" id=""name"" name=""name"" placeholder=""Name"" /></th>
                        <th style=""text-align:center; width:16%""><input type=""text"" style=""text-align:center;"" class=""form-control"" id=""quantity"" name=""quantity"" value=""1"" ");
            WriteLiteral(@"placeholder=""Quantity"" onkeypress=""return isNumberKey(event,this)"" /></th>
                        <th style=""text-align:center; width:16%""><input type=""text"" style=""text-align:center;"" class=""form-control"" id=""amount"" name=""amount"" onkeypress=""return isNumberKey(event,this)"" disabled /></th>
                        <th style=""width:14%"">
                            <select class=""form-control duration"">
");
            EndContext();
            BeginContext(1769, 36, true);
            WriteLiteral("                                    ");
            EndContext();
            BeginContext(1805, 52, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1943641395734c88b8e0ee141762939a", async() => {
                BeginContext(1841, 7, true);
                WriteLiteral("-------");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("data-amount", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1857, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 44 "E:\03. TEST PROJECT\CorePractice\CorePractice\Views\Test\Index.cshtml"
                                    foreach (var item in @ViewBag.Data)
                                    {

#line default
#line hidden
            BeginContext(1971, 40, true);
            WriteLiteral("                                        ");
            EndContext();
            BeginContext(2011, 73, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "39c8ad3f7b974d41b143f61a55a31985", async() => {
                BeginContext(2066, 9, false);
#line 46 "E:\03. TEST PROJECT\CorePractice\CorePractice\Views\Test\Index.cshtml"
                                                                                         Write(item.Dura);

#line default
#line hidden
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            BeginWriteTagHelperAttribute();
#line 46 "E:\03. TEST PROJECT\CorePractice\CorePractice\Views\Test\Index.cshtml"
                                           WriteLiteral(item.Dura);

#line default
#line hidden
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = __tagHelperStringValueBuffer;
            __tagHelperExecutionContext.AddTagHelperAttribute("value", __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            BeginWriteTagHelperAttribute();
#line 46 "E:\03. TEST PROJECT\CorePractice\CorePractice\Views\Test\Index.cshtml"
                                                                           Write(item.Amount);

#line default
#line hidden
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("data-amount", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2084, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 47 "E:\03. TEST PROJECT\CorePractice\CorePractice\Views\Test\Index.cshtml"
                                    }
                                

#line default
#line hidden
            BeginContext(2160, 1474, true);
            WriteLiteral(@"                            </select>
                        </th>
                        <th style=""text-align:center; width:5%;padding-bottom: 10px""><button type=""button"" class=""btn btn-primary btn-sm newItem"">+</button></th>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class=""row"">
            <table class=""table table-bordered"" id=""assignTable"">
                <thead>
                    <tr>
                        <th style=""text-align:center; width:49%"">Name</th>
                        <th style=""text-align:center; width:16%"">Quantity</th>
                        <th style=""text-align:center; width:16%"">Amount</th>
                        <th style=""text-align:center; width:14%"">Duration</th>
                        <th style=""text-align:center; width:5%""></th>
                    </tr>
                </thead>

                <tbody id=""finalData""></tbody>
                <tfoot>
                    <tr>
              ");
            WriteLiteral(@"          <th colspan=""2""></th>
                        <th></th>
                        <th colspan=""2""></th>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>

    <div class=""row"">
        <div class=""col-md-8"">
            <div class=""text-center"">
                <button class=""btn btn-primary"" id=""btnSave""> Save </button>
            </div>
        </div>
    </div>
</div>

");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(3651, 699, true);
                WriteLiteral(@"

    <script type=""text/javascript"">
        function isNumberKey(evt, obj) {

            var charCode = (evt.which) ? evt.which : event.keyCode
            var value = obj.value;
            var dotcontains = value.indexOf(""."") != -1;
            if (dotcontains)
                if (charCode == 46) return false;
            if (charCode == 46) return true;
            if (charCode > 31 && (charCode < 48 || charCode > 57))
                return false;
            return true;
        }

        function isEmpty(value) {
            return (value == null || value.length === 0) ? true : false;
        }

        $(document).ready(function () {

            var inc = '");
                EndContext();
                BeginContext(4351, 67, false);
#line 112 "E:\03. TEST PROJECT\CorePractice\CorePractice\Views\Test\Index.cshtml"
                  Write(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Data)));

#line default
#line hidden
                EndContext();
                BeginContext(4418, 4974, true);
                WriteLiteral(@"';
            inc = JSON.parse(inc);
            //console.log(inc);

            var ss = """";
            for (i = 0; i < inc.length; i++) {
                ss+= '<option value=""' + inc[i].Id + '"" data-amount=""'+inc[i].Amount+'"">' + inc[i].Dura + '</option>'
            }

            //console.log(ss);

            $("".newItem"").click(function () {
                var name = $(""#name"").val();
                var quantity = $(""#quantity"").val();
                var amount = $(""#amount"").val();
                var dura = $("".duration"").val();

                console.log(amount);
                if (isEmpty(name) == true) {
                    $('#name').css('border-color', 'red');
                    return;
                }
                else {
                    $('#name').css('border-color', '');
                }

                if (isEmpty(quantity) == true) {
                    $('#quantity').css('border-color', 'red');
                    return;
                }
");
                WriteLiteral(@"                else {
                    $('#quantity').css('border-color', '');
                }

                if (isEmpty(amount) == true) {
                    $('#amount').css('border-color', 'red');
                    return;
                }
                else {
                    $('#amount').css('border-color', '');
                }

                if (dura == -404) {
                    $('.duration').css('border-color', 'red');
                    return;
                }
                else {
                    $('.duration').css('border-color', '');
                }

                $(""#finalData"").append('<tr>' +
                    '<th style = ""text-align:center; width:49%""> <input type=""text"" class=""form-control"" id=""name"" name=""name"" disabled value=""' + name + '"" /></th >' +
                    '<th style=""text-align:center; width:16%""><input type=""text"" style=""text-align:center;"" class=""form-control"" id=""quantity"" name=""quantity"" disabled value=""' + qua");
                WriteLiteral(@"ntity + '"" /></th>' +
                    '<th style=""text-align:center; width:16%""><input type=""text"" style=""text-align:center;"" class=""form-control"" id=""amount"" name=""amount"" disabled value=""' + amount + '"" /></th>' +
                    '<th style=""text-align:center; width:14%""><input type=""text"" style=""text-align:center;"" class=""form-control"" id=""duration"" name=""duration"" disabled value=""' + dura + '""/></th>' +
                    '<th style=""text-align:center; width:5% ;padding-bottom: 10px""><button type=""button"" class=""btn btn-primary btn-sm removeItem"">-</button></th>' +
                    '</tr>');
                $(""#name"").val('');
                $(""#quantity"").val('1');
                $(""#amount"").val('');
                //$("".duration"").value(-404);

                $("".duration"").find('option[value=""-404""]').attr('selected','selected')

            });

            $(""#assignTable"").on('click', '.removeItem', function () {
                $(this).parent().parent().remove();
  ");
                WriteLiteral(@"          });

            $(document).on('change', '.duration', function () {
                var amount = $(this).find(':selected').attr('data-amount');
                var quantity = $(this).closest('tr').find(""input[name='quantity']"").val();
                $(this).closest('tr').find(""input[name='amount']"").val(amount * quantity);

            });

            $(document).on('keyup', '#quantity', function () {
                var qty = $(this).val();
                console.log(qty);
                var amount = $(this).closest('tr').find(':selected').attr('data-amount');
                var z = $(this).closest('tr').find(""input[name='amount']"").val(amount * qty);

            });


            $(""#btnSave"").click(function () {

                var ClassEntryDetailsListArray = [];

                $('#finalData tr').each(function () {

                    ClassEntryDetails = {};
                    ClassEntryDetails[""Name""] = $(this).find(""#name"").val();
                    Class");
                WriteLiteral(@"EntryDetails[""Quantity""] = $(this).find(""#quantity"").val();
                    ClassEntryDetailsListArray.push(ClassEntryDetails);
                    //var p = """";
                    //$(this).find('td').each(function () {
                    //    console.log('start------');
                    //    //do your stuff, you can use $(this) to get current cell
                    //    var d = $(this).val();
                    //    console.log(d);
                    //})

                });
                //var Testing = {};
                //Testing[""ClassEntryDetails""] = ClassEntryDetailsListArray;

                //console.log(Testing);
                var data2 = JSON.stringify(ClassEntryDetailsListArray);
                console.log('stringfy', data2);
                $.ajax({
                    type: 'POST',
                    url: '");
                EndContext();
                BeginContext(9393, 25, false);
#line 225 "E:\03. TEST PROJECT\CorePractice\CorePractice\Views\Test\Index.cshtml"
                     Write(Url.Action("Save","Test"));

#line default
#line hidden
                EndContext();
                BeginContext(9418, 966, true);
                WriteLiteral(@"',
                    data: data2,
                    contentType: ""application/json; charset=utf-8"",
                    dataType: ""json"",


                    success: function (response) {

                    },
                    error: function () {

                    }

                });
            });

            //$("".newItem"").click(function () {

            //    var $initialBody = $('#initialTable').find(""tbody"");
            //        $initialTrLast = $initialBody.find(""tr:last"");
            //        $trNew1 = $initialTrLast.clone();

            //    var $tableBody = $('#assignTable').find(""tbody"");
            //    $trLast = $tableBody.find(""tr:last"");
            //    console.log(""last"", $trLast);
            //        //$trNew = $initialTrLast.clone();
            //    $trLast.after($trNew1);
            //    console.log(""calling"", $trNew1);
            //});
        });

    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<CorePractice.Models.Testing> Html { get; private set; }
    }
}
#pragma warning restore 1591
